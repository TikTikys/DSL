package jetbreins.mps.DSL.sandbox;

/*Generated by MPS */

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class ClimatConstrolSystem {
  private String resultCode = "";

  private StringBuilder includeAndDefineCommands = new StringBuilder();
  private StringBuilder setupPart = new StringBuilder();
  private StringBuilder loopPart = new StringBuilder();

  public static void main(String[] args) {
    ClimatConstrolSystem system = new ClimatConstrolSystem();
    system.generateCodeToActuator("Act1", 101, "BLUETOOTH", "DISPLAY");
    system.generareCodeToSensor("Sens", 112, "BLUETOOTH", "TEMPERATURE", 2);
    system.generareCodeToSensor("Sens2", 112, "WIFI", "TEMPERATURE", 23);
    system.generateCodeToActuator("Act", 132, "LoRaWAN", "DISPLAY");
    system.generateCodeToActuator("Ad", 312, "BLUETOOTH", "DISPLAY");
    system.writeCodeToFile("D:\\", "ClimatConstrolSystem");
  }

  public void generateCodeToActuator(String name, double value, String typeNetwork, String typeAct) {
    // add code Act 
    resultCode = resultCode + "It's code Act\n";
  }

  public void generareCodeToSensor(String name, double value, String typeNetwork, String typeSensor, int port) {
    addNetworkCode(typeNetwork);
    switch (typeSensor) {
      case "TEMPERATURE":
        includeAndDefineCommands.append("#include \"DHT.h\"\n" + "#define DHTPIN " + port + "\n" + "DHT dht(DHTPIN, DHT22);\n");
        setupPart.append("Serial.begin(9600);\n" + "dht.begin();\n");
        loopPart.append("float temperature = dht.readTemperature();\n" + "if (isnan(t)) {\n" + "   Serial.printli(\"Temperature reading error.\");\n" + "   return;\n" + "Serial.print(\"Temperature: \");\n" + "Serial.print(t);");
        break;
      case "LIGHT":
        break;
      case "HUMIDITY":
        break;
      case "MOVEMENT":
        break;
    }
    resultCode = resultCode + includeAndDefineCommands.toString() + "void setup() {\n" + setupPart.toString() + "}\n" + "void loop() {\n" + loopPart.toString() + "}\n\n\n\n";
    includeAndDefineCommands.delete(0, includeAndDefineCommands.length());
    setupPart.delete(0, setupPart.length());
    loopPart.delete(0, loopPart.length());
  }

  private void addNetworkCode(String networkType) {
    switch (networkType) {
      case "WIFI":
        includeAndDefineCommands.append("#include <SoftwareSerial.h>\n" + "SoftwareSerial mySerial(8, 9);\n" + "#define WIFI_SERIAL    mySerial\n");
        setupPart.append("Serial.begin(9600);\n" + "while (!Serial) {  }\n" + "Serial.println(\"Serial init OK);\n" + "WIFI_SERIAL.begin(115200);\n");
        loopPart.append("if (WIFI_SERIAL.avalaible()) {\n" + "   Serial.write(WIFI_SERIAL.read());\n" + "}\n" + "if (Serial.avaliable()) {\n" + "   WIFI_SERIAL.write(Serial.read());" + "}\n");
        break;
      case "BLUETOOTH":
        includeAndDefineCommands.append("#include <SoftwareSerial.h>\n" + "char incomingByte;\n");
        setupPart.append("Serial.begin(9600);\n" + "Serial.println(Bluetooth connection is working.);\n");
        loopPart.append("if (Serial.avaliable() > 0) {\n" + "   incomingByte = Serial.read();\n}");
        break;
      case "LoRaWAN":
        break;
    }
  }

  private void writeCodeToFile(String path, String name) {
    File outputFile = new File(path, name + ".ino");
    System.out.print(resultCode);
    try {
      FileWriter fileWriter = new FileWriter(outputFile);
      fileWriter.write(resultCode);
      fileWriter.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}
