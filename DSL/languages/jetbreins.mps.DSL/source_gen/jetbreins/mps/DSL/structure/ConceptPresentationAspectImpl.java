package jetbreins.mps.DSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actuator;
  private ConceptPresentation props_ActuatorType;
  private ConceptPresentation props_ActuatorTypeReference;
  private ConceptPresentation props_Device;
  private ConceptPresentation props_IoTSystem;
  private ConceptPresentation props_Network;
  private ConceptPresentation props_NetworkReference;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_SensorType;
  private ConceptPresentation props_sensorTypeReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actuator:
        if (props_Actuator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("actuator");
          props_Actuator = cpb.create();
        }
        return props_Actuator;
      case LanguageConceptSwitch.ActuatorType:
        if (props_ActuatorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActuatorType = cpb.create();
        }
        return props_ActuatorType;
      case LanguageConceptSwitch.ActuatorTypeReference:
        if (props_ActuatorTypeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfeb17c0829d94491L, 0x8d09f7c77293d2b9L, 0x5061f666854e2199L, 0x5061f666854e219aL, "typeActuator", "", "");
          props_ActuatorTypeReference = cpb.create();
        }
        return props_ActuatorTypeReference;
      case LanguageConceptSwitch.Device:
        if (props_Device == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Device = cpb.create();
        }
        return props_Device;
      case LanguageConceptSwitch.IoTSystem:
        if (props_IoTSystem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IoTSystem = cpb.create();
        }
        return props_IoTSystem;
      case LanguageConceptSwitch.Network:
        if (props_Network == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Network = cpb.create();
        }
        return props_Network;
      case LanguageConceptSwitch.NetworkReference:
        if (props_NetworkReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfeb17c0829d94491L, 0x8d09f7c77293d2b9L, 0x5061f6668549a91cL, 0x5061f6668549a91dL, "typeNetwork", "", "");
          props_NetworkReference = cpb.create();
        }
        return props_NetworkReference;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sencor");
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.SensorType:
        if (props_SensorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SensorType = cpb.create();
        }
        return props_SensorType;
      case LanguageConceptSwitch.sensorTypeReference:
        if (props_sensorTypeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xfeb17c0829d94491L, 0x8d09f7c77293d2b9L, 0x5061f666854a9025L, 0x5061f666854a9026L, "sensorType", "", "");
          props_sensorTypeReference = cpb.create();
        }
        return props_sensorTypeReference;
    }
    return null;
  }
}
